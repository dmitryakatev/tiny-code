// /\ (Y)
// |
// |
// |     o p3 (x3, y3)
// |     |\
// |     |  \  
// |   E |    \ F (DISTANCE)
// |     |      \
// |     |  ( alf \
// |     -----------\o  p2 (x2, y2)
// |          D      |\
// |                 |  \
// |                 |    \
// |                 |      \  C
// |               B |        \
// |                 |          \
// |                 |            \
// |                 |        ( alf \
// |                 ----------------o p1 (x1, y1)
// |                         A
// |
// --------------------------------------------------------> (X)
//
// даны две точки p1, p2 и дана дистанция (distance)
// найти точку p3 лежащую на этой прямой
//
// РЕШЕНИЕ:
// рассмотрим треугольник DEF.
// для того чтобы найти точку p3 нам необходимо знать катеты D и E,
// вычтя их из точки p2 (x2, y2) мы как раз получим точку p3.
// эти катеты можно найти по гипотенузе и острому углу (формула будет ниже)
// гипотенуза F нам известна так как это и есть дистанция.
// а вот угол alpha нам не известен, его нужно найти.
// угол alpha в трреугольнике DEF и трреугольнике ABC будут равны.
// поэтому теперь рассмотрим треугольник ABC для нахождения угла alpha.
// угол alpha равен арктангенсу отношению катета B к катету A:
// 
//               B
// alpha = atan(---)
//               A
//
// где
//   катет A = Math.abs(x2 - x1);
//   катет B = Math.abs(y2 - y1);
//
//
// найдя угол alpha возвращаемся к треугольнику DEF для нахождения катета E.
// для этого гипотенузу умножаем на синус угла alpha, формула:
//
// катет E = F * sin(alpha)
//
// теперь если объединимм 2 наши формулы в одну, то получим следущее выражение:
// x = B / A (введем переменную x как отношение стороны B к A)
// E = F * sin(atan(x))
//
// по правилу математики выражение sin(atan(x)) можно упростить до следущего:
// https://math.stackexchange.com/questions/970505/when-simplifying-sin-arctanx-why-is-negative-x-not-considered/1582564
//                      x
// sin(atan(x)) = --------------- = x / (x ^ 2 + 1) ^ 0.5
//                   ___________
//                 \/ x ^ 2 + 1
//
// тогда конечная формула для нахождения катета E будет равна:
//
// x = B / A
// E = F * x / (x ^ 2 + 1) ^ 0.5
//
// теперь для того чтобы найти катет D воспользуемся формулой пифагора:
//
// D ^ 2 + E ^ 2 = F ^ 2
//
// тогда
//
// D = (F ^ 2 - E ^ 2) ^ 0.5
//
//
// теперь когда мы знаем катеты E и D, то найдем точку p3:
//
// x3 = p2.x - D
// y3 = p2.y - E
//

export function findPointByFormula(p1, p2, distance) {
  const cA = Math.abs(p2.x - p1.x); 
  const cB = Math.abs(p2.y - p1.y);

  const x = cB / cA;
  const cE = distance * x / (x ** 2 + 1) ** 0.5;
  const cD = (distance ** 2 - cE ** 2) ** 0.5;

  const dirX = p2.x > p1.x ? 1 : -1;
  const dirY = p2.y > p1.y ? 1 : -1;

  return {
    x: p2.x + dirX * cD,
    y: p2.y + dirY * cE,
  };
}
